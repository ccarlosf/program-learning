2-0 在Nginx中解决跨域问题（9分钟）
vim imooc.conf
server {
        listen       90;
        server_name  localhost;

#允许跨域请求的域，*代表所有
add_header 'Access-Control-Allow-Origin' *;
#允许带上cookie请求
add_header 'Access-Control-Allow-Credentials' 'true';
#允许请求的方法，比如 GET/POST/PUT/DELETE
add_header 'Access-Control-Allow-Methods' *;
#允许请求的header
add_header 'Access-Control-Allow-Headers' *;

        location / {
            root   /home/foodie-shop;
            index  index.html;
        }

        location /imooc {
            root   /home;
        }


        location /static {
            alias  /home/imooc;
        }

    }



2-1 在Nginx中配置静态资源防盗链（4分钟）
Nginx 防盗链配置支持
server {
        listen       90;
        server_name  localhost;

#允许跨域请求的域，*代表所有
add_header 'Access-Control-Allow-Origin' *;
#允许带上cookie请求
add_header 'Access-Control-Allow-Credentials' 'true';
#允许请求的方法，比如 GET/POST/PUT/DELETE
add_header 'Access-Control-Allow-Methods' *;
#允许请求的header
add_header 'Access-Control-Allow-Headers' *;

#对源站点验证
valid_referers *.imooc.com;
#非法引入会进入下方判断
if ($invalid_referer) {
    return 404;
}

        location / {
            root   /home/foodie-shop;
            index  index.html;
        }

        location /imooc {
            root   /home;
        }


        location /static {
            alias  /home/imooc;
        }

    }



2-2 Nginx的模块化设计解析（9分钟）



2-3 Nginx的集群负载均衡解析（7分钟）



2-4 附：Nginx 跨域配置支持



2-5 附：Nginx 防盗链配置支持



2-6 四层、七层与DNS负载均衡（10分钟）



2-7 附：OSI 网络模型



2-8 使用Nginx搭建3台Tomcat集群（7分钟）
1.远程拷贝tomcat安装包和jdk到其它服务器
scp -r apache-tomcat-9.0.24.tar.gz root@192.168.253.147:/home/software/
scp /home/software/jdk-8u191-linux-x64.tar.gz root@192.168.253.145:/home/software/

2.配置nginx文件
vim imooc.conf
#配置上游服务器
upstream tomcats {
        server 192.168.253.146:8080;
        server 192.168.253.147:8080;
        server 192.168.253.145:8080;
}

server {
        listen       80;
        server_name  www.tomcats.com;


         location / {
            proxy_pass http://tomcats;
        }
    }




2-9 使用JMeter测试单节点与集群的并发异常率（21分钟）
#增加云服务器测试
upstream tomcats {
        server 192.168.253.146:8080;
#        server 192.168.253.147:8080;
#        server 192.168.253.145:8080;
        server 120.78.168.208:8080;
}



2-10 负载均衡之轮训（7分钟）



2-11 负载均衡之权重（5分钟）
1.编辑配置文件
vim imooc.conf
#配置上游服务器
upstream tomcats {
        server 192.168.253.146:8080 weight=1;
        server 192.168.253.147:8080 weight=2;
        server 192.168.253.145:8080 weight=5;
#        server 120.78.168.208:8080;
}



2-12 upstream的指令参数之max_conns（11分钟）
1.修改imooc.conf
#配置上游服务器
upstream tomcats {
        server 192.168.253.146:8080 max_conns=2;
        server 192.168.253.147:8080 max_conns=2;
        server 192.168.253.145:8080 max_conns=2;
#        server 120.78.168.208:8080;
}

2.修改nginx.conf
worker_processes  1;




2-14 upstream的指令参数之slow_start（4分钟）
1.修改imooc.conf
#配置上游服务器
upstream tomcats {
        server 192.168.253.146:8080 weight=6 slow_start=60s;
        server 192.168.253.147:8080 weight=2;
        server 192.168.253.145:8080 weight=2;
#        server 120.78.168.208:8080;
}



2-16 upstream的指令参数之down与backup（3分钟）
1.修改imooc.conf
upstream tomcats {
        server 192.168.253.146:8080 down;
        server 192.168.253.147:8080 weight=1;
        server 192.168.253.145:8080 weight=1;
#        server 120.78.168.208:8080;
}

upstream tomcats {
        server 192.168.253.146:8080 backup;
        server 192.168.253.147:8080 weight=1;
        server 192.168.253.145:8080 weight=1;
#        server 120.78.168.208:8080;
}



2-18 upstream的指令参数之max_fails 与 fail_timeout（8分钟）
1.默认值
max_fails为1
fail_timeout为10s

2.修改imooc.conf
upstream tomcats {
        server 192.168.253.146:8080 max_fails=2 fail_timeout=1s;
        server 192.168.253.147:8080 weight=1;
        server 192.168.253.145:8080 weight=1;
#        server 120.78.168.208:8080;
}

3.停止tomcat-1
./shutdown.sh



2-19 附：upstream 指令参数 max_fails、fail_timeout



2-20 使用Keepalived提高吞吐量（6分钟）
1.修改imooc.conf
upstream tomcats {
#        server 192.168.253.146:8080 max_fails=2 fail_timeout=1s;
#        server 192.168.253.147:8080 weight=1;
#        server 192.168.253.145:8080 weight=1;
        server 120.78.168.208:8080;

        keepalive 32;
}

server {
        listen       80;
        server_name  www.tomcats.com;


         location / {
            proxy_pass http://tomcats;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }



2-21 附：Keepalived 提高吞吐量



2-22 负载均衡原理 - ip_hash（13分钟）
1.修改imooc.conf
upstream tomcats {
         ip_hash;

        server 192.168.253.146:8080;
        server 192.168.253.147:8080 down;
        server 192.168.253.145:8080;
#        server 120.78.168.208:8080;

}

server {
        listen       80;
        server_name  192.168.253.129;


         location / {
            proxy_pass http://tomcats;
        }
    }


2.源码分析
cd /home/software/nginx-1.16.1/src/http/modules
vim ngx_http_upstream_ip_hash_module.c
/addr
/addrlen

3.down标记，不能移除服务器节点



2-23 附：负载均衡 ip_hash
参考：
http://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash



2-24 一致性hash算法（11分钟）



2-25 负载均衡原理 - url hash 与 least_conn（8分钟）
1.上传项目包到服务器

2.远程复制项目
scp -r nginx-url-hash.war root@192.168.253.147:/usr/local/tomcat-2/webapps

3.修改nginx的imooc.conf

# url hash
upstream tomcats {
        hash $request_uri;

        server 192.168.253.146:8080;
        server 192.168.253.147:8080;
        server 192.168.253.145:8080;
#        server 120.78.168.208:8080;

}

server {
        listen       80;
        server_name  www.tomcats.com;


         location / {
            proxy_pass http://tomcats;
        }
    }


4.浏览器进行访问
http://www.tomcats.com/nginx-url-hash/hello

5. least_conn
# least_conn
upstream tomcats {
        #hash $request_uri;
        least_conn;

        server 192.168.253.146:8080;
        server 192.168.253.147:8080;
        server 192.168.253.145:8080;
#        server 120.78.168.208:8080;

}



2-26 附：负载均衡 url_hash 与 least_conn



2-27 Nginx控制浏览器缓存 - 1（8分钟）
1.进入imooc目录
cd /home/imooc

2.创建imooc.html
vim cache.html
<html>
   <body>
       <h1>
            Helo, Nginx~
       </h1>
   </body>
</html>

3.进入nginx配置文件目录
/usr/local/nginx/conf

4.访问地址
http://192.168.253.129:90/static/cache.html

5.vim imooc.html
<html>
   <body>
       <h1>
            Helo, Nginx~!~
       </h1>
   </body>
</html>



2-28 Nginx控制浏览器缓存 - 2（7分钟）
1.vim imooc.html
  location /static {
            alias  /home/imooc;
            #expires 10s;
            #expires @22h30m;
            #expires -1h;
            #expires epoch;
            #expires off;
            expires max;
        }



2-29 附：Nginx的缓存



2-30 Nginx的反向代理缓存（11分钟）
远程复制静态资源到3台tomcat
scp -r imooc root@192.168.253.146:/usr/local/tomcat-1/webapps
scp -r imooc root@192.168.253.147:/usr/local/tomcat-2/webapps
scp -r imooc root@192.168.253.145:/usr/local/tomcat-3/webapps

#配置上游服务器
upstream tomcats {
        #hash $request_uri;
        #least_conn;

        server 192.168.253.146:8080;
        server 192.168.253.147:8080;
        server 192.168.253.145:8080;
#        server 120.78.168.208:8080;

}

# proxy_cache_path 设置缓存保存的目录
# keys_zone 设置共享内存以及占用的空间大小
# max_size 设置缓存大小
# inactive 超过此时间，则缓存自动清理
# use_temp_path 关闭临时目录
proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=30s use_temp_path=off;

server {
        listen       81;
        server_name  www.tomcats.com;

        # 开启并且使用缓存
         proxy_cache mycache;
        # 针对200和304状态码的缓存设置过期时间
         proxy_cache_valid      200  304 8h;

         location / {
            proxy_pass http://tomcats;
        }
    }



2-31 附：Nginx的反向代理缓存



2-32 使用Nginx配置SSL证书提供HTTPS访问（15:38）
1.进入nginx安装目录
/home/software/nginx-1.16.1

2.重新配置ssl模块
./configure \
--prefix=/usr/local/nginx \
--pid-path=/var/run/nginx/nginx.pid \
--lock-path=/var/lock/nginx.lock \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--with-http_gzip_static_module \
--http-client-body-temp-path=/var/temp/nginx/client \
--http-proxy-temp-path=/var/temp/nginx/proxy \
--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \
--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \
--http-scgi-temp-path=/var/temp/nginx/scgi \
--with-http_ssl_module

3.编译和安装
make
make install

4.进入objs目录
cd objs/

5.查看ngx_modules.c
vim ngx_modules.c

6.搜索ssl
/ssl

7.查看nginx信息
/usr/local/nginx/sbin/nginx -V

8.443端口监听配置
server {
   listen 443;
   server_name www.imoocdsp.com;
   # 开启ssl
   ssl on;
   # 配置ssl证书
   ssl_certificate 1_www.imoocdsp.com_bundle.crt;
   # 配置证书秘钥
   ssl_certificate_key 2_www.imoocdsp.com.key;
   # ssl会话
   cache ssl_session_cache shared:SSL:1m;
   # ssl会话超时时间
   ssl_session_timeout 5m;
   # 配置加密套件，写法遵循 openssl 标准
   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
   ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
   ssl_prefer_server_ciphers on;
   location /
   { proxy_pass http://tomcats/;



2-33 动静分离的那些事儿（11分钟）



2-34 部署Nginx到云端 - 安装Nginx（10分钟）
0.上传nginx安装包到云服务器

1.安装gcc环境
yum install gcc-c++

2.安装PCRE库，用于解析正则表达式
yum install -y pcre pcre-devel

3.安装zlib压缩和解压缩依赖
yum install -y zlib zlib-devel

4.安装openssl
yum install -y openssl openssl-devel

5.解压nginx安装包
tar -zxvf nginx-1.16.1.tar.gz

6.编译之前，先创建nginx临时目录，如果不创建，在启动nginx的过程中会报错
mkdir /var/temp/nginx -p

7.在nginx目录，输入如下命令进行配置，目的是为了创建makefile文件
./configure \
--prefix=/usr/local/nginx \
--pid-path=/var/run/nginx/nginx.pid \
--lock-path=/var/lock/nginx.lock \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--with-http_gzip_static_module \
--http-client-body-temp-path=/var/temp/nginx/client \
--http-proxy-temp-path=/var/temp/nginx/proxy \
--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \
--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \
--http-scgi-temp-path=/var/temp/nginx/scgi

8.make编译
make

9.安装
make install

10.搜索安装好的nginx
whereis nginx

11.修改nginx.conf
user  root;
worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

}

12.启动nginx
cd /usr/local/nginx/
cd sbin/
./nginx

13.修改本地hosts文件
192.168.253.129  www.tomcats.com
120.78.168.208 shop.z.mukewang.com
120.78.168.208 api.z.mukewang.com
120.78.168.208 center.z.mukewang.com

14.访问nginx
http://shop.z.mukewang.com/



2-35 部署Nginx到云端 - 配置反向代理（5分钟）
1.nginx新增tomcats.conf
vim tomcats.conf
upstream api.z.mukewang.com {
        server 172.18.60.202:8088;
}

server {
        listen 80;
        server_name api.z.mukewang.com;

        location ~ {
                proxy_pass http://api.z.mukewang.com;
        }
}

2.修改nginx conf文件
vim nginx.conf

user  root;
worker_processes  1;

events {
    worker_connections  1024;
}

    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

    include tomcats.conf;

}

3.访问测试
http://api.z.mukewang.com/foodie-dev-api/doc.html



2-36 附：使用Nginx配置HTTPS域名证书



2-37 部署Nginx到云端 - 实现动静分离与虚拟主机（9分钟）
1.创建静态资源站点目录
mkdir /home/website

2.停止tomcat-frontend
cd /usr/local/tomcat-frontend/bin/
./shutdown.sh

3.把tomcat中的静态资源项目拷贝到nginx
cd ../webapps/
cp foodie-* /home/website/ -rf

4.修改静态资源的app.js
(1) cd foodie-shop/js/
vim app.js
/* 生产环境 */
serverUrl: "http://api.z.mukewang.com:8088/foodie-dev-api",      // 接口服务接口地址
paymentServerUrl: "http://payment.t.mukewang.com/foodie-payment", // 支付中心服务地址
shopServerUrl: "http://shop.z.mukewang.com:8080/foodie-shop/",    // 门户网站地址
centerServerUrl: "http://center.z.mukewang.com:8080/foodie-center/",    // 用户中心地址
cookieDomain: ".z.mukewang.com;",     // cookie 域

ctx: "/foodie-shop",

改为
/* 生产环境 */
serverUrl: "http://api.z.mukewang.com/foodie-dev-api",      // 接口服务接口地址
paymentServerUrl: "http://payment.t.mukewang.com/foodie-payment", // 支付中心服务地址
shopServerUrl: "http://shop.z.mukewang.com",    // 门户网站地址
centerServerUrl: "http://center.z.mukewang.com",    // 用户中心地址
cookieDomain: ".z.mukewang.com;",     // cookie 域

ctx: "/foodie-shop",

(2) cd foodie-center/js/
vim app.js
/* 生产环境 */
serverUrl: "http://api.z.mukewang.com:8088/foodie-dev-api",      // 接口服务接>口地址
paymentServerUrl: "http://payment.t.mukewang.com/foodie-payment", // 支付中心服务地址
shopServerUrl: "http://shop.z.mukewang.com:8080/foodie-shop/",    // 门户网站地址
centerServerUrl: "http://center.z.mukewang.com:8080/foodie-center/",    // 用户中心地址
cookieDomain: ".z.mukewang.com;",

ctx: "/foodie-shop",

改为
/* 生产环境 */
serverUrl: "http://api.z.mukewang.com/foodie-dev-api",      // 接口服务接>口地址
paymentServerUrl: "http://payment.t.mukewang.com/foodie-payment", // 支付中心服务地址
shopServerUrl: "http://shop.z.mukewang.com",    // 门户网站地址
centerServerUrl: "http://center.z.mukewang.com",    // 用户中心地址
cookieDomain: ".z.mukewang.com;",

ctx: "/foodie-shop",

5.配置nginx
cd /usr/local/nginx/conf/
vim frontend.conf
server {
        listen 80;
        server_name shop.z.mukewang.com;

        location / {
              root  /home/website/foodie-shop;
              index    index.html;
        }
}

server {
        listen 80;
        server_name center.z.mukewang.com;

        location / {
              root  /home/website/foodie-center;
              index    index.html;
        }
}

6.修改nginx.conf文件，把frontend.conf包含进来
include frontend.cong;
http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

    include tomcats.conf;
    include frontend.conf;

}

7.访问测试网站
http://shop.z.mukewang.com/