1-5 Nginx安装与运行（15分钟）
1.安装gcc环境
yum install gcc-c++

2.安装PCRE库，用于解析正则表达式
yum install -y pcre pcre-devel

3.安装zlib压缩和解压缩依赖
yum install -y zlib zlib-devel

4.安装openssl
yum install -y openssl openssl-devel

5.解压nginx安装包
tar -zxvf nginx-1.16.1.tar.gz

6.编译之前，先创建nginx临时目录，如果不创建，在启动nginx的过程中会报错
mkdir /var/temp/nginx -p

7.在nginx目录，输入如下命令进行配置，目的是为了创建makefile文件
./configure \
--prefix=/usr/local/nginx \
--pid-path=/var/run/nginx/nginx.pid \
--lock-path=/var/lock/nginx.lock \
--error-log-path=/var/log/nginx/error.log \
--http-log-path=/var/log/nginx/access.log \
--with-http_gzip_static_module \
--http-client-body-temp-path=/var/temp/nginx/client \
--http-proxy-temp-path=/var/temp/nginx/proxy \
--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \
--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \
--http-scgi-temp-path=/var/temp/nginx/scgi

8.make编译
make

9.安装
make install

10.搜索安装好的nginx
whereis nginx

11.启动nginx
cd /usr/local/nginx/
cd sbin/
./nginx



1-8 Nginx进程模型解析（7分钟）
worker_processes  2;



1-9 Nginx处理Web请求机制解析（10分钟）
events {
    # 默认使用epoll
    use epoll;
    # 每个worker允许连接的客户端最大连接数
    worker_connections  10240;
}



1-13 nginx.conf 核心配置文件详解 - 1（6分钟）
user  root;



1-15 nginx.conf 核心配置文件详解 - 3（12分钟）
   server {
        listen       89;
        server_name  localhost;

        location / {
            root   html;
            index  imooc.html index.htm;
        }
    }

cp index.html imooc.html

导入文件模式
include imooc.conf;




1-16 nginx.pid打开失败以及失效的解决方案（4分钟）
1.重新加载nginx，找不到pid
/nginx -s reload

2.查看nginx帮助命令
/nginx -h

3.指定nginx配置加载文件
./nginx -c /usr/local/nginx/conf/nginx.conf



1-17 Nginx常用命令解析（4分钟）
1.暴力关闭nginx
./nginx -s stop

2.友好关闭nginx
./nginx -s quit

3.测试nginx
./nginx -t

4.查看nginx版本号
./nginx -v
./nginx -V

5.查看nginx帮助
./nginx -h
./nginx -?

6.手动指定切换核心配置文件
./nginx -c /usr/local/nginx/conf/nginx.conf



1-18 Nginx日志切割 - 手动（7分钟）
1.进入nginx可执行sbin目录
cd /usr/local/nginx/sbin/

2.创建可执行脚本文件
vim cut_my_log.sh

#!/bin/bash
LOG_PATH="/var/log/nginx/"
RECORD_TIME=$(date -d "yesterday" +%Y-%m-%d+%H:%M)
PID=/var/run/nginx/nginx.pid
mv ${LOG_PATH}/access.log ${LOG_PATH}/access.${RECORD_TIME}.log
mv ${LOG_PATH}/error.log ${LOG_PATH}/error.${RECORD_TIME}.log

#向Nginx主进程发送信号，用于重新打开日志文件
kill -USR1 `cat $PID`

3.为 cut_my_log.sh 添加可执行的权限：
chmod +x cut_my_log.sh

4. 测试日志切割后的结果:
./cut_my_log.sh



1-19 附：Nginx 日志切割-手动



1-20 Nginx日志切割 - 定时（5分钟）
1. 安装定时任务：
yum install crontabs

查看定时任务列表
crontab -l

2. crontab -e 编辑并且添加一行新的任务：
*/1 * * * * /usr/local/nginx/sbin/cut_my_log.sh

查看定时任务列表
crontab -l

3. 重启定时任务：
service crond restart

附：常用定时任务命令：
service crond start //启动服务
service crond stop //关闭服务
service crond restart //重启服务
service crond reload //重新载入配置
crontab -e // 编辑任务
crontab -l // 查看任务列表

定时任务表达式：
Cron表达式是，分为5或6个域，每个域代表一个含义，如下所示：
         分   时    日   月 星期几   年（可选）
取值范围 0-59 0-23 1-31 1-12 1-7 2019/2020/2021/…

常用表达式：
每分钟执行：
*/1 * * * *
每日凌晨（每天晚上23:59）执行：
59 23 * * *
每日凌晨1点执行：
0 1 * * *

参考文献：
每天定时为数据库备份：https://www.cnblogs.com/leechenxiang/p/7110382.html



1-21 附：Nginx 日志切割-定时



1-22 虚拟主机 - 使用Nginx为静态资源提供服务（13分钟）
1.上传静态资源到服务器

2.vim imooc.conf
server {
        listen       90;
        server_name  localhost;

        location / {
            root   /home/foodie-shop;
            index  index.html;
        }


        location /imooc {
            root   /home;
        }

    }
或者
server {
        listen       90;
        server_name  localhost;

        location / {
            root   /home/foodie-shop;
            index  index.html;
        }


        location /static {
            #root   /home;
            alias  /home/imooc;
        }

    }

总
server {
        listen       90;
        server_name  localhost;

        location / {
            root   /home/foodie-shop;
            index  index.html;
        }

        location /imooc {
            root   /home;
        }


        location /static {
            alias  /home/imooc;
        }

    }



1-23 使用Gzip压缩提升请求效率（5分钟）
1.vim nginx.conf
打开压缩
# 开启gzip压缩功能，目的：提高传输效率，节约带宽
# 开启gzip压缩功能，目的：提高传输效率，节约带宽
gzip  on;
# 限制最小压缩，小于1字节文件不会压缩
gzip_min_length 1;
# 定义压缩的级别（压缩比，文件越大，压缩越多，但是cpu使用会越多）
gzip_comp_level 3;
# 定义压缩文件的类型
gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;



1-25 location的匹配规则解析（12分钟）
1.精准匹配
vim imooc.conf
server {
        listen       91;
        server_name  localhost;

        #精确匹配
        location = / {
            root   html;
            index  imooc.html index.htm;
        }

        location = /imooc/暴风截图2021131-2056005421.jpg {
            root   /home;
        }

    }

2.正则表达式匹配
vim imooc.conf
server {
        listen       92;
        server_name  localhost;

        #正则表达式 *代表不区分大小写
        location ~* \.(GIF|png|bmp|jpg|jpeg) {
            root   /home;
        }
    }


server {
        listen       92;
        server_name  localhost;

        #正则表达式 *代表不区分大小写
        location ~ \.(GIF|png|bmp|jpg|jpeg) {
            root   /home;
        }
    }

3.~ 以某个字符路径开头请求，只能匹配/imooc/img的资源
server {
        listen       93;
        server_name  localhost;

        #^~ 以某个字符路径开头请求
         location ^~ /imooc/img {
            root   /home;
        }
    }



1-26 附：location 的匹配规则



1-27 DNS域名解析（8分钟）
