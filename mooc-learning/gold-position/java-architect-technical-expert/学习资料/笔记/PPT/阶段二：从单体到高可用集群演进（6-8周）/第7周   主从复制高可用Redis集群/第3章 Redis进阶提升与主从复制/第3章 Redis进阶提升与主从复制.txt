3-1 Redis 的发布（pub）与订阅（sub）（10分钟）



3-2 Redis的持久化机制 - RDB（20分钟）
1.进入redis目录
cd /usr/local/redis/
vim redis.conf
/SNA

2.数据文件存储目录
dbfilename dump.rdb
dir /usr/local/redis/working

3.rdb备份时间
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#
#   Note: you can disable saving completely by commenting out all "save" lines.
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#
#   save ""

save 900 1（key至少发生一次key更改，15分钟后保存快照）
save 300 10（key至少发生10次更改，5分钟后保存快照）
save 60 100（key至少发生100次更改，1分钟后保存快照）
save 10 3 （ke至少发生3次key更改，10秒后rdb备份）（新增）

重启redis
/etc/init.d/redis_init_script stop
/etc/init.d/redis_init_script start

查看详细时间
-rw-r--r--. 1 root root 5482 2021-03-21 22:04:23.442470952 +0800 dump.rdb
[root@pinyoyougou-docker working]# ll --full-time


打开客户端2
127.0.0.1:6379> keys *
1) "zset"
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> set aa aa
OK
127.0.0.1:6379> set bb bb
OK
127.0.0.1:6379> set cc cc
OK
127.0.0.1:6379>

设置值之后，rdb文件更新时间发生更改
[root@pinyoyougou-docker working]# ll --full-time
总用量 8
-rw-r--r--. 1 root root 5442 2021-03-21 22:06:36.061475144 +0800 dump.rdb

4.保存错误时停止写（vim redis.conf）
stop-writes-on-bgsave-error yes


5.开启rdb压缩，但是消耗CPU
# Compress string objects using LZF when dump .rdb databases?
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
rdbcompression yes

6.压缩对数据进行校验（有性能损耗）
# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
rdbchecksum yes



3-3 附：Redis的持久化机制 - RDB



3-4 Redis的持久化机制 - AOF（23分钟）
1.编辑redis.conf
/APPEND
appendonly no改为appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec

2.重启redis
[root@pinyoyougou-docker redis]# /etc/init.d/redis_init_script stop
Stopping ...
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
Redis stopped
[root@pinyoyougou-docker redis]# /etc/init.d/redis_init_script start
Starting Redis server...
6508:C 22 Mar 2021 20:45:52.411 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
6508:C 22 Mar 2021 20:45:52.411 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=6508, just started
6508:C 22 Mar 2021 20:45:52.411 # Configuration loaded

[root@pinyoyougou-docker redis]# cd working/
[root@pinyoyougou-docker working]# ll
总用量 8
-rw-r--r--. 1 root root    0 3月  22 20:45 appendonly.aof
-rw-r--r--. 1 root root 5463 3月  22 20:45 dump.rdb

3.编辑redis.conf
正在重写时，不做同步
no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.
# 重写编写aop文件过大，满足下面两个条件，触发重写压缩
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

4.AOF备份数据
[root@pinyoyougou-docker working]# redis-cli
127.0.0.1:6379> auth
(error) ERR wrong number of arguments for 'auth' command
127.0.0.1:6379> auth imooc
OK
127.0.0.1:6379> keys *
1) "sex"
2) "age"
3) "imooc"
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379>
[root@pinyoyougou-docker working]# ll
总用量 8
-rw-r--r--. 1 root root 135 3月  22 20:55 appendonly.aof
-rw-r--r--. 1 root root  92 3月  22 20:55 dump.rdb
[root@pinyoyougou-docker working]# vim appendonly.aof
删除flushDB
[root@pinyoyougou-docker working]# /etc/init.d/redis_init_script stop
Stopping ...
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
Redis stopped
[root@pinyoyougou-docker working]# vim appendonly.aof
[root@pinyoyougou-docker working]# /etc/init.d/redis_init_script start
Starting Redis server...
6552:C 22 Mar 2021 20:56:21.282 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
6552:C 22 Mar 2021 20:56:21.282 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=6552, just started
6552:C 22 Mar 2021 20:56:21.282 # Configuration loaded
[root@pinyoyougou-docker working]# ll
总用量 8
-rw-r--r--. 1 root root 118 3月  22 20:56 appendonly.aof
-rw-r--r--. 1 root root  92 3月  22 20:56 dump.rdb
[root@pinyoyougou-docker working]# redis-cli
127.0.0.1:6379> auth imooc
OK
127.0.0.1:6379> keys *
1) "sex"
2) "age"
3) "imooc"



3-5 附：Redis的持久化机制 - AOF