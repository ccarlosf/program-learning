3-1 Redis 的发布（pub）与订阅（sub）（10分钟）



3-2 Redis的持久化机制 - RDB（20分钟）
1.进入redis目录
cd /usr/local/redis/
vim redis.conf
/SNA

2.数据文件存储目录
dbfilename dump.rdb
dir /usr/local/redis/working

3.rdb备份时间
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#
#   Note: you can disable saving completely by commenting out all "save" lines.
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#
#   save ""

save 900 1（key至少发生一次key更改，15分钟后保存快照）
save 300 10（key至少发生10次更改，5分钟后保存快照）
save 60 100（key至少发生100次更改，1分钟后保存快照）
save 10 3 （ke至少发生3次key更改，10秒后rdb备份）（新增）

重启redis
/etc/init.d/redis_init_script stop
/etc/init.d/redis_init_script start

查看详细时间
-rw-r--r--. 1 root root 5482 2021-03-21 22:04:23.442470952 +0800 dump.rdb
[root@pinyoyougou-docker working]# ll --full-time


打开客户端2
127.0.0.1:6379> keys *
1) "zset"
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> set aa aa
OK
127.0.0.1:6379> set bb bb
OK
127.0.0.1:6379> set cc cc
OK
127.0.0.1:6379>

设置值之后，rdb文件更新时间发生更改
[root@pinyoyougou-docker working]# ll --full-time
总用量 8
-rw-r--r--. 1 root root 5442 2021-03-21 22:06:36.061475144 +0800 dump.rdb

4.保存错误时停止写（vim redis.conf）
stop-writes-on-bgsave-error yes


5.开启rdb压缩，但是消耗CPU
# Compress string objects using LZF when dump .rdb databases?
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
rdbcompression yes

6.压缩对数据进行校验（有性能损耗）
# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
rdbchecksum yes



3-3 附：Redis的持久化机制 - RDB



3-4 Redis的持久化机制 - AOF（23分钟）
1.编辑redis.conf
/APPEND
appendonly no改为appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec

2.重启redis
[root@pinyoyougou-docker redis]# /etc/init.d/redis_init_script stop
Stopping ...
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
Redis stopped
[root@pinyoyougou-docker redis]# /etc/init.d/redis_init_script start
Starting Redis server...
6508:C 22 Mar 2021 20:45:52.411 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
6508:C 22 Mar 2021 20:45:52.411 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=6508, just started
6508:C 22 Mar 2021 20:45:52.411 # Configuration loaded

[root@pinyoyougou-docker redis]# cd working/
[root@pinyoyougou-docker working]# ll
总用量 8
-rw-r--r--. 1 root root    0 3月  22 20:45 appendonly.aof
-rw-r--r--. 1 root root 5463 3月  22 20:45 dump.rdb

3.编辑redis.conf
正在重写时，不做同步
no-appendfsync-on-rewrite no

# Automatic rewrite of the append only file.
# Redis is able to automatically rewrite the log file implicitly calling
# BGREWRITEAOF when the AOF log size grows by the specified percentage.
#
# This is how it works: Redis remembers the size of the AOF file after the
# latest rewrite (if no rewrite has happened since the restart, the size of
# the AOF at startup is used).
#
# This base size is compared to the current size. If the current size is
# bigger than the specified percentage, the rewrite is triggered. Also
# you need to specify a minimal size for the AOF file to be rewritten, this
# is useful to avoid rewriting the AOF file even if the percentage increase
# is reached but it is still pretty small.
#
# Specify a percentage of zero in order to disable the automatic AOF
# rewrite feature.
# 重写编写aop文件过大，满足下面两个条件，触发重写压缩
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

4.AOF备份数据
[root@pinyoyougou-docker working]# redis-cli
127.0.0.1:6379> auth
(error) ERR wrong number of arguments for 'auth' command
127.0.0.1:6379> auth imooc
OK
127.0.0.1:6379> keys *
1) "sex"
2) "age"
3) "imooc"
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379>
[root@pinyoyougou-docker working]# ll
总用量 8
-rw-r--r--. 1 root root 135 3月  22 20:55 appendonly.aof
-rw-r--r--. 1 root root  92 3月  22 20:55 dump.rdb
[root@pinyoyougou-docker working]# vim appendonly.aof
删除flushDB
[root@pinyoyougou-docker working]# /etc/init.d/redis_init_script stop
Stopping ...
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
Redis stopped
[root@pinyoyougou-docker working]# vim appendonly.aof
[root@pinyoyougou-docker working]# /etc/init.d/redis_init_script start
Starting Redis server...
6552:C 22 Mar 2021 20:56:21.282 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
6552:C 22 Mar 2021 20:56:21.282 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=6552, just started
6552:C 22 Mar 2021 20:56:21.282 # Configuration loaded
[root@pinyoyougou-docker working]# ll
总用量 8
-rw-r--r--. 1 root root 118 3月  22 20:56 appendonly.aof
-rw-r--r--. 1 root root  92 3月  22 20:56 dump.rdb
[root@pinyoyougou-docker working]# redis-cli
127.0.0.1:6379> auth imooc
OK
127.0.0.1:6379> keys *
1) "sex"
2) "age"
3) "imooc"



3-5 附：Redis的持久化机制 - AOF



3-6 Redis 主从复制原理解析（12分钟）



3-7 多虚拟机克隆方案（9分钟）
1.克隆虚拟机 从redis-1克隆出redis-base

2.ip addr
mac地址
link/ether 00:0c:29:a8:2e:1b

3.修改relues.d
vim /etc/udev/rules.d/70-persistent-ipoib.rules
# ACTION=="add", SUBSYSTEM=="net", DRIVERS=="?*", ATTR{type}=="32", ATTR{address}=="00:0c:29:a8:2e:1b", NAME="mlx4_ib3"

vim /etc/sysconfig/network-scripts/ifcfg-ens33

4.重启网络服务
service network restart



3-8 搭建Redis主从复制（读写分离）（17分钟）
1.redis-1查看主从状态信息
127.0.0.1:6379> info replication
# Replication
role:master
connected_slaves:0
master_replid:bb14c66b5019fa2696dc7ffeef7e869683f9e44a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0
127.0.0.1:6379>

2.从节点redis-2操作（配置一主一从）
修改配置文件redis.conf
cd /usr/local/redis/
/Rep
(1)配置主节点地址
#
#   +------------------+      +---------------+
#   |      Master      | ---> |    Replica    |
#
#    a given number of replicas.
# 3) Replication is automatic and does not need user intervention. After a
#    network partition replicas automatically try to reconnect to masters
#    and resynchronize with them.
#
#replicaof <masterip> <masterport>
replicaof 192.168.253.155 6379

(2)配置密码
# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the replica to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the replica request.
#
masterauth imooc

(3)配置从节点只读（默认配置）
# You can configure a replica instance to accept writes or not. Writing against
# a replica instance may be useful to store some ephemeral data (because data
# written on a replica will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
#
# Since Redis 2.6 by default replicas are read-only.
#
# Note: read only replicas are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only replica exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only replicas using 'rename-command' to shadow all the
# administrative / dangerous commands.
replica-read-only yes

(4)删除数据文件
cd /usr/local/redis/working/
rm appendonly.aof dump.rdb

(5)重启redis
[root@pinyoyougou-docker working]# /etc/init.d/redis_init_script stop
Stopping ...
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
Redis stopped
[root@pinyoyougou-docker working]# /etc/init.d/redis_init_script start
Starting Redis server...
2226:C 22 Mar 2021 22:04:16.333 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
2226:C 22 Mar 2021 22:04:16.333 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=2226, just started
2226:C 22 Mar 2021 22:04:16.333 # Configuration loaded

重启后working目录又出现appendonly.aof dump.rdb（从master中同步来的）
键值数据也从master中同步来
[root@pinyoyougou-docker working]# redis-cli
127.0.0.1:6379> auth imooc
OK
127.0.0.1:6379> keys *
1) "imooc"
2) "sex"
3) "age"

(6)查询集群状态信息
role:slave 为从节点
127.0.0.1:6379> info replication
# Replication
role:slave
master_host:192.168.253.155
master_port:6379
master_link_status:up
master_last_io_seconds_ago:5
master_sync_in_progress:0
slave_repl_offset:126
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:7ab22bc7fad73414c69186a40f2b6f172e3be20a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:126
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:57
repl_backlog_histlen:70

3.查询redis-1集群状态信息
已完成一主一从
connected_slaves:1
slave0:ip=192.168.253.156,port=6379,state=online,offset=238,lag=1

127.0.0.1:6379> info replication
# Replication
role:master
connected_slaves:1
slave0:ip=192.168.253.156,port=6379,state=online,offset=238,lag=1
master_replid:7ab22bc7fad73414c69186a40f2b6f172e3be20a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:238
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:238

4.测试一主一从
(1)主节点redis-1设置值后，会同步给从节点

(2)从节点redis-2不允许进行写操作
127.0.0.1:6379> set abc 123
(error) READONLY You can't write against a read only replica.


5.从节点redis-2操作（配置一主二从）
(1)删除数据文件
cd /usr/local/redis/working
rm dump.rdb appendonly.aof

(2)修改核心配置文件
vim redis.conf
/Repli
################################# REPLICATION #################################

# Master-Replica replication. Use replicaof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
#
#   +------------------+      +---------------+
#   |      Master      | ---> |    Replica    |
#   | (receive writes) |      |  (exact copy) |
#   +------------------+      +---------------+
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of replicas.
# 2) Redis replicas are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 3) Replication is automatic and does not need user intervention. After a
#    network partition replicas automatically try to reconnect to masters
#    and resynchronize with them.
#
# replicaof <masterip> <masterport>
replicaof 192.168.253.155 6379
# If the master is password protected (using the "requirepass" configuration
# directive below) it is possible to tell the replica to authenticate before
# starting the replication synchronization process, otherwise the master will
# refuse the replica request.
#
masterauth imooc

# You can configure a replica instance to accept writes or not. Writing against
# a replica instance may be useful to store some ephemeral data (because data
# written on a replica will be easily deleted after resync with the master) but
# may also cause problems if clients are writing to it because of a
# misconfiguration.
#
# Since Redis 2.6 by default replicas are read-only.
#
# Note: read only replicas are not designed to be exposed to untrusted clients
# on the internet. It's just a protection layer against misuse of the instance.
# Still a read only replica exports by default all the administrative commands
# such as CONFIG, DEBUG, and so forth. To a limited extent you can improve
# security of read only replicas using 'rename-command' to shadow all the
# administrative / dangerous commands.
replica-read-only yes

(3)重启redis
[root@pinyoyougou-docker redis]# /etc/init.d/redis_init_script stop
Stopping ...
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
Redis stopped
[root@pinyoyougou-docker redis]# /etc/init.d/redis_init_script start
Starting Redis server...
3376:C 23 Mar 2021 07:11:44.918 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
3376:C 23 Mar 2021 07:11:44.918 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=3376, just started
3376:C 23 Mar 2021 07:11:44.918 # Configuration loaded

(4)查看集群状态
127.0.0.1:6379> info replication
# Replication
role:slave
master_host:192.168.253.155
master_port:6379
master_link_status:up
master_last_io_seconds_ago:7
master_sync_in_progress:0
slave_repl_offset:45372
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:7ab22bc7fad73414c69186a40f2b6f172e3be20a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:45372
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:45317
repl_backlog_histlen:56
127.0.0.1:6379>

6.重新回到主节点redis-1查看集群状态
127.0.0.1:6379> info replication
# Replication
role:master
connected_slaves:2
slave0:ip=192.168.253.156,port=6379,state=online,offset=45470,lag=0
slave1:ip=192.168.253.157,port=6379,state=online,offset=45470,lag=0
master_replid:7ab22bc7fad73414c69186a40f2b6f172e3be20a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:45470
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:45470
127.0.0.1:6379>

7.测试一主二从
(1)停止redis-2从节点
/etc/init.d/redis_init_script stop
(2)redis-1主节点查看集群状态信息
从节点只剩一点
127.0.0.1:6379> info replication
# Replication
role:master
connected_slaves:1
slave0:ip=192.168.253.157,port=6379,state=online,offset=115218,lag=1
master_replid:7ab22bc7fad73414c69186a40f2b6f172e3be20a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:115218
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:115218
127.0.0.1:6379>
(3)reids-1设置值后，redis-3也能把数据同步过来
127.0.0.1:6379> set k1 123
OK
127.0.0.1:6379> set k2 456
OK
127.0.0.1:6379> set k3 789
OK
127.0.0.1:6379>
(4)redis-2恢复启动后,k1,k2,k3也能再同步过来
 /etc/init.d/redis_init_script start
127.0.0.1:6379> keys *
1) "k2"
2) "k1"
3) "age"
4) "sex"
5) "mail"
6) "imooc"
7) "k3"
(5)停止主节点redis-1后
从节点redis-2集群状态信息 master_link_status:down
127.0.0.1:6379> info replication
# Replication
role:slave
master_host:192.168.253.155
master_port:6379
master_link_status:down
master_last_io_seconds_ago:-1
master_sync_in_progress:0
slave_repl_offset:115625
master_link_down_since_seconds:10
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:7ab22bc7fad73414c69186a40f2b6f172e3be20a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:115625
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:115500
repl_backlog_histlen:126

从节点redis-3集群状态信息 master_link_status:down
127.0.0.1:6379> info replication
# Replication
role:slave
master_host:192.168.253.155
master_port:6379
master_link_status:down
master_last_io_seconds_ago:-1
master_sync_in_progress:0
slave_repl_offset:115625
master_link_down_since_seconds:19
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:7ab22bc7fad73414c69186a40f2b6f172e3be20a
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:115625
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:45317
repl_backlog_histlen:70309



3-9 Redis无磁盘化复制原理解析（10分钟）
1.无磁盘化复制（默认关闭）
# Replication SYNC strategy: disk or socket.
#
# -------------------------------------------------------
# WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY
# -------------------------------------------------------
#
# New replicas and reconnecting replicas that are not able to continue the replication
# process just receiving differences, need to do what is called a "full
# synchronization". An RDB file is transmitted from the master to the replicas.
# The transmission can happen in two different ways:
#
# 1) Disk-backed: The Redis master creates a new process that writes the RDB
#                 file on disk. Later the file is transferred by the parent
#                 process to the replicas incrementally.
# 2) Diskless: The Redis master creates a new process that directly writes the
#              RDB file to replica sockets, without touching the disk at all.
#
# With disk-backed replication, while the RDB file is generated, more replicas
# can be queued and served with the RDB file as soon as the current child producing
# the RDB file finishes its work. With diskless replication instead once
# the transfer starts, new replicas arriving will be queued and a new transfer
# will start when the current one terminates.
#
# When diskless replication is used, the master waits a configurable amount of
# time (in seconds) before starting the transfer in the hope that multiple replicas
# will arrive and the transfer can be parallelized.
#
# With slow disks and fast (large bandwidth) networks, diskless replication
# works better.
repl-diskless-sync no

等待5秒后，进行同步
# When diskless replication is enabled, it is possible to configure the delay
# the server waits in order to spawn the child that transfers the RDB via socket
# to the replicas.
#
# This is important since once the transfer starts, it is not possible to serve
# new replicas arriving, that will be queued for the next RDB transfer, so the server
# waits a delay in order to let more replicas arrive.
#
# The delay is specified in seconds, and by default is 5 seconds. To disable
# it entirely just set it to 0 seconds and the transfer will start ASAP.
repl-diskless-sync-delay 5



3-10 Redis 缓存过期处理与内存淘汰机制（11分钟）
1.hz 1秒抽查10次key 主动（定期删除）
# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

2.maxmemory <bytes>设置最大内存（如果超过，redis会进行自动清理）
############################## MEMORY MANAGEMENT ################################

# Set a memory usage limit to the specified amount of bytes.
# When the memory limit is reached Redis will try to remove keys
# according to the eviction policy selected (see maxmemory-policy).
#
# If Redis can't remove keys according to the policy, or if the policy is
# set to 'noeviction', Redis will start to reply with errors to commands
# that would use more memory, like SET, LPUSH, and so on, and will continue
# to reply to read-only commands like GET.
#
# This option is usually useful when using Redis as an LRU or LFU cache, or to
# set a hard memory limit for an instance (using the 'noeviction' policy).
#
# WARNING: If you have replicas attached to an instance with maxmemory on,
# the size of the output buffers needed to feed the replicas are subtracted
# from the used memory count, so that network problems / resyncs will
# not trigger a loop where keys are evicted, and in turn the output
# buffer of replicas is full with DELs of keys evicted triggering the deletion
# of more keys, and so forth until the database is completely emptied.
#
# In short... if you have replicas attached it is suggested that you set a lower
# limit for maxmemory so that there is some free RAM on the system for replica
# output buffers (but this is not needed if the policy is 'noeviction').
#
# maxmemory <bytes>

3.清除算法maxmemory-policy noeviction（默认）
noeviction -> Don't evict anything, just return an error on write operations.
allkeys-lfu -> Evict any key using approximated LFU. 清理不常用到的所有缓存（常用）
allkeys-random -> Remove a random key, any key. 随机删除缓存key
volatile-lru -> Evict using approximated LRU among the keys with an expire set.清理不常用到的有过期时间的缓存
volatile-random -> Remove a random key, any key. 随机删除有过期时间的缓存key
volatile-ttl -> Remove the key with the nearest expire time (minor TTL) 删除即将缓存过期的key

# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory
# is reached. You can select among five behaviors:
#
# volatile-lru -> Evict using approximated LRU among the keys with an expire set.
# allkeys-lru -> Evict any key using approximated LRU.
# volatile-lfu -> Evict using approximated LFU among the keys with an expire set.
# allkeys-lfu -> Evict any key using approximated LFU.
# volatile-random -> Remove a random key among the ones with an expire set.
# allkeys-random -> Remove a random key, any key.
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
# noeviction -> Don't evict anything, just return an error on write operations.
#
# LRU means Least Recently Used
# LFU means Least Frequently Used
#
# Both LRU, LFU and volatile-ttl are implemented using approximated
# randomized algorithms.
#
# Note: with any of the above policies, Redis will return an error on write
#       operations, when there are no suitable keys for eviction.
#
#       At the date of writing these commands are: set setnx setex append
#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd
#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby
#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby
#       getset mset msetnx exec sort
#
# The default is:
#
# maxmemory-policy noeviction