1-1 分布式架构概述（15分钟）



1-2 为何引入Redis？（6分钟）



1-3 什么是NoSql？（5分钟）



1-4 什么是分布式缓存，什么是Redis？（3分钟）



1-5 分布式缓存方案与技术选型：Redis VS Memcache VS Ehcache（5分钟）



1-6 安装与配置Redis（17分钟）
1.上传redis至服务器redis-1（192.168.253.155）

2.解压缩redis安装包
cd /home/software
tar -zxvf redis-5.0.5.tar.gz

3.安装redis
cd redis-5.0.5
yum install gcc-c++
make
make install

4.配置redis
(1) 配置redis初始化脚本至etc目录
cd utils/
cp redis_init_script /etc/init.d/
cd /etc/init.d

(2) 拷贝redis.conf至/usr/local/redis/目录
cd /home/software/redis-5.0.5
mkdir /usr/local/redis -p
cp redis.conf /usr/local/redis/

(3) 修改核心配置文件
cd /usr/local/redis/
vim redis.conf

/dae
修改为后台启动
daemonize yes

/dir
修改redis工作空间
# The working directory.
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
#
# The Append Only File will also be created inside this directory.
#
# Note that you must specify a directory here, not a file name.
dir /usr/local/redis/working

创建working目录
mkdir working

/bind
修改绑定ip（允许远程使用）
# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the
# internet, binding to all the interfaces is dangerous and will expose the
# instance to everybody on the internet. So by default we uncomment the
# following bind directive, that will force Redis to listen only into
# the IPv4 loopback interface address (this means Redis will be able to
# accept connections only from clients running into the same computer it
# is running).
#
# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES
# JUST COMMENT THE FOLLOWING LINE.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bind 0.0.0.0

/pass
设置redis密码
# Warning: since Redis is pretty fast an outside user can try up to
# 150k passwords per second against a good box. This means that you should
# use a very strong password otherwise it will be very easy to break.
#
requirepass imooc

/port

/pid

(4) 修改redis启动脚本
cd /etc/init.d/
vim redis_init_script
CONF="/usr/local/redis/redis.conf"

给redis脚本授予777权限
chmod 777 redis_init_script

启动redis
./redis_init_script start

检查redis进程
ps -ef|grep redis

设置redis自启动
vim redis_init_script
# chkconfig: 22345 10 90
# description: Start and Stop redis

命令执行，设置为redis开机自启动
chkconfig redis_init_script on

重新启动服务器，自测
reboot

检查redis进程
ps -ef | grep redis



1-7 附：安装与配置 Redis



1-8 Redis命令行客户端基本使用（4分钟）
1.进入redis脚本目录
cd /etc/init.d/
vim redis_init_script

2.客户端存放工具
CLIEXEC=/usr/local/bin/redis-cli

3.命令行执行redis-cli

4.查看redis-cli 进程
[root@pinyoyougou-docker ~]# ps -ef|grep redis
root       638     1  0 3月11 ?       00:00:47 /usr/local/bin/redis-server 0.0.0.0:6379
root      5488  2165  0 06:13 pts/0    00:00:00 redis-cli
root      5507  5489  0 06:13 pts/1    00:00:00 grep --color=auto redis

5.登录
auth imooc

6.设置
set name imooc

7.取值
get name

8.删除
del name

127.0.0.1:6379> auth imooc
OK
127.0.0.1:6379> set name imooc
OK
127.0.0.1:6379> get name
"imooc"
127.0.0.1:6379> del name
(integer) 1
127.0.0.1:6379> get name
(nil)
127.0.0.1:6379>

9.检查redis存活
[root@pinyoyougou-docker init.d]# redis-cli  ping
(error) NOAUTH Authentication required.
[root@pinyoyougou-docker init.d]# redis-cli -a imooc ping
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
PONG

10.停止redis服务
停止redis服务，停止不了，因为是需要密码
./redis_init_script stop

vim redis_init_script
$CLIEXEC -a "imooc" -p $REDISPORT shutdown



1-9 附：Redis的命令行客户端



1-10 Redis的数据类型 - string（15分钟）
基本命令
1.设置
set name imooc

2.查看键，查看全部（不推荐使用，损耗性能）
keys *

127.0.0.1:6379> set name imooc
OK
127.0.0.1:6379> keys *
1) "name"
127.0.0.1:6379> set age 18
OK
127.0.0.1:6379> keys *
1) "name"
2) "age"
127.0.0.1:6379>

3.查看键，模糊匹配（推荐使用）
keys x*
127.0.0.1:6379> keys a*
1) "age"
127.0.0.1:6379> keys *e
1) "name"
2) "age"

4.查看键类型
type age
127.0.0.1:6379> type age
string

5.键不存在时，进行设置
因为age键存在，所以值不会从20变为18
setnx age 18
因为sex键不存在，所以值可以设置成功
setnx sex man

127.0.0.1:6379> setnx age 18
(integer) 0
127.0.0.1:6379> get age
"20"
127.0.0.1:6379> setnx sex man
(integer) 1

6.查看键过期时间
ttl age
127.0.0.1:6379> ttl age
(integer) -1

7.设置键过期时间
127.0.0.1:6379> expire age 30
(integer) 1

8.已过期
127.0.0.1:6379> ttl age
(integer) -2

9.设置值时，带过期时间
set vip yes ex 20

10.字符串拼接
append name 123

127.0.0.1:6379> get name
"imooc"
127.0.0.1:6379> append name 123
(integer) 8
127.0.0.1:6379> get name
"imooc123"

11.查看字符串长度
127.0.0.1:6379>  STRLEN name
(integer) 8

12.累加
incr age
127.0.0.1:6379> set age 18
OK
127.0.0.1:6379> keys *
1) "name"
2) "age"
3) "sex"
127.0.0.1:6379> incr age
(integer) 19

13.累减
decr age
127.0.0.1:6379> decr age
(integer) 22
127.0.0.1:6379> decr age
(integer) 21

14.增加具体数值
INCRBY age 10
127.0.0.1:6379> decr age
(integer) -5
127.0.0.1:6379> INCRBY age 10
(integer) 5


15.减少具体数值
DECRBY age 10
127.0.0.1:6379> DECRBY age 10
(integer) 25

16.获取指定范围的字符串
getrange name 0 -1
127.0.0.1:6379> getrange name 0 -1
"imooc123"
127.0.0.1:6379> getrange name 2 4
"ooc"

17.指范围设置
SETRANGE name 1 abc
127.0.0.1:6379> SETRANGE name 1 abc
(integer) 8
127.0.0.1:6379> get name
"iabcc123"

18.批量设置和取值
mset k1 aa k2 bb
mget k1 k2
127.0.0.1:6379> mset k1 aa k2 bb
OK
127.0.0.1:6379> mget k1 k2
1) "aa"
2) "bb"

19.批量设置（键存在时，不能设置）
msetnx k2 123 k3 cc
127.0.0.1:6379> msetnx k2 123 k3 cc
(integer) 0
127.0.0.1:6379> msetnx k4 dd k3 cc
(integer) 1

20.切换数据库
select 1

21.清除当前数据库数据
flushdb
127.0.0.1:6379> flushdb
OK

22.清除所有库的数据
flushall
127.0.0.1:6379> flushall
OK



1-11 附：Redis的数据类型 - string



1-12 Redis的数据类型-hash（6分钟）
Hash对象操作
1.设置和获取对象属性
127.0.0.1:6379> hset user name imooc
(integer) 1
127.0.0.1:6379> hget user name
"imooc"

2.批量设置多个属性
127.0.0.1:6379> hmset user age 18 sex man
OK
127.0.0.1:6379> hmget user age sex name
1) "18"
2) "man"
3) "imooc"

3.获取全部属性
127.0.0.1:6379> hgetall user
1) "name"
2) "imooc"
3) "age"
4) "18"
5) "sex"
6) "man"

4.查询对象中包含几个属性
127.0.0.1:6379> hlen user
(integer) 3

5.查看对象里所有的key
127.0.0.1:6379> hkeys user
1) "name"
2) "age"
3) "sex"

6.查看对象里所有的值
127.0.0.1:6379> hvals user
1) "imooc"
2) "18"
3) "man"

7.增长对象中属性的值
127.0.0.1:6379> HINCRBY user age 3
(integer) 21
127.0.0.1:6379> HINCRBY user age 3
(integer) 24
127.0.0.1:6379> HINCRBYfloat user age 2.2
"26.2"

8.判断对象中某个属性是否存在
127.0.0.1:6379> HEXISTS user age
(integer) 1
127.0.0.1:6379> HEXISTS user email
(integer) 0

9. 删除对象中的属性
127.0.0.1:6379> HDEL user
(error) ERR wrong number of arguments for 'hdel' command
127.0.0.1:6379> HDEL user age
(integer) 1
127.0.0.1:6379> HDEL user name
(integer) 1
127.0.0.1:6379> HGETALL user
1) "sex"
2) "man"
127.0.0.1:6379> HDEL user sex
(integer) 1
127.0.0.1:6379> HGETALL user
(empty list or set)



1-13 附：Redis的数据类型 - hash



1-14 Redis的数据类型 - list（12分钟）
list操作
1.创建list1
127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> lpush list1 pig cow sheep chicken duck
(integer) 5
127.0.0.1:6379> rpush list2 pig cow sheep chicken duck
(integer) 5

2.查看list1
127.0.0.1:6379> lrange list1 0 -1
1) "duck"
2) "chicken"
3) "sheep"
4) "cow"
5) "pig"

127.0.0.1:6379> lrange list2 0 -1
1) "pig"
2) "cow"
3) "sheep"
4) "chicken"
5) "duck"

3.从list1左边取值
127.0.0.1:6379> lpop list1
"duck"
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "sheep"
3) "cow"
4) "pig"

从list1右边取值
127.0.0.1:6379> rpop list1
"pig"
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "sheep"
3) "cow"

4.查看list长度
127.0.0.1:6379> llen list1
(integer) 3

5.下表取值
127.0.0.1:6379> lindex list1 2
"cow"

6.set设置
127.0.0.1:6379> lset list1 1 1001
OK
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "1001"
3) "cow"

7.insert插入值
127.0.0.1:6379> linsert list1 BEFORE 1001 aaa
(integer) 4
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "aaa"
3) "1001"
4) "cow"

127.0.0.1:6379> linsert list1 after 1001 aaa
(integer) 5
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "aaa"
3) "1001"
4) "aaa"
5) "cow"

8.lrem删除值
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "aaa"
3) "1001"
4) "aaa"
5) "cow"
127.0.0.1:6379> lrem list1 2 aaa
(integer) 2
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "1001"
3) "cow"

9.ltrim截取值
127.0.0.1:6379> lrange list1 0 -1
1) "chicken"
2) "1001"
3) "cow"
127.0.0.1:6379> ltrim list1 1 2
OK
127.0.0.1:6379> lrange list1 0 -1
1) "1001"
2) "cow"

10.del删除list
127.0.0.1:6379> del list1
(integer) 1
127.0.0.1:6379> lrange list1 0 -1
(empty list or set)
127.0.0.1:6379> keys *
1) "list2"