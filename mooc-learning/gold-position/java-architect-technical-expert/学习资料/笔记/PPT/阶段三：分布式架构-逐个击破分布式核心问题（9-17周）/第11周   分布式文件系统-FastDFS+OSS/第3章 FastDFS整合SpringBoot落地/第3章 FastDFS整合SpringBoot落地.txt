第3章 FastDFS整合SpringBoot落地
3-1 FastDFS整合SpringBoot - 实现service（7分钟）
  @Override
    public String upload(MultipartFile file, String fileExtName) throws Exception {

        StorePath storePath = fastFileStorageClient.uploadFile(file.getInputStream(),
                                file.getSize(),
                                fileExtName,
                                null);

        String path = storePath.getFullPath();

        return path;
    }

3-2 FastDFS整合SB - 实现头像上传（8分钟）
1.代码实现
 @PostMapping("uploadFace")
    public JSONResult uploadFace(
            String userId,
            MultipartFile file,
            HttpServletRequest request,
            HttpServletResponse response) throws Exception {

        String path = "";
        // 开始文件上传
        if (file != null) {
            // 获得文件上传的文件名称
            String fileName = file.getOriginalFilename();
            if (StringUtils.isNotBlank(fileName)) {

                // 文件重命名  imooc-face.png -> ["imooc-face", "png"]
                String fileNameArr[] = fileName.split("\\.");

                // 获取文件的后缀名
                String suffix = fileNameArr[fileNameArr.length - 1];

                if (!suffix.equalsIgnoreCase("png") &&
                        !suffix.equalsIgnoreCase("jpg") &&
                        !suffix.equalsIgnoreCase("jpeg")) {
                    return JSONResult.errorMsg("图片格式不正确！");
                }

                path = fdfsService.upload(file, suffix);

//                path = fdfsService.uploadOSS(file, userId, suffix);
                System.out.println(path);
            }
        } else {
            return JSONResult.errorMsg("文件不能为空！");
        }

        return JSONResult.ok();
    }

2.修改前端测试
修改foodie-center的userinfo.html
			// console.log(userInfo);
						// 请求后端获得最新数据
						//var serverUrl = app.serverUrl;
						//var fileServer = serverUrl + '/userInfo/uploadFace?userId=' + userInfo.id
						var fileServer = 'http://localhost:8066/fdfs/uploadFace?userId=' + userInfo.id
						axios.defaults.withCredentials = true;
						axios.post(
							//	serverUrl + '/userInfo/uploadFace?userId=' + userInfo.id,
							    fileServer,
								multiForm,
								{
									headers: {
										'Content-Type': 'multipart/form-data',
										'headerUserId': userInfo.id,
										'headerUserToken': userInfo.userUniqueToken
									}
								})



3-3 FS整合 - 完善头像上传与修改（8分钟）
3-3 FastDFS整合SpringBoot - 完善头像上传与修改（08:07）
1.代码实现

        if (StringUtils.isNotBlank(path)) {
            String finalUserFaceUrl = fileResource.getHost() + path;

            Users userResult = centerUserService.updateUserFace(userId, finalUserFaceUrl);

            UsersVO usersVO = conventUsersVO(userResult);

            CookieUtils.setCookie(request, response, "user",
                    JsonUtils.objectToJson(usersVO), true);
        } else {
            return JSONResult.errorMsg("上传头像失败");
        }

@Controller
public class BaseController {

    @Autowired
    private RedisOperator redisOperator;

    public static final String REDIS_USER_TOKEN = "redis_user_token";


    public UsersVO conventUsersVO(Users user) {
        // 实现用户的redis会话
        String uniqueToken = UUID.randomUUID().toString().trim();
        redisOperator.set(REDIS_USER_TOKEN + ":" + user.getId(),
                uniqueToken);

        UsersVO usersVO = new UsersVO();
        BeanUtils.copyProperties(user, usersVO);
        usersVO.setUserUniqueToken(uniqueToken);
        return usersVO;
    }
}

@Component
@PropertySource("classpath:file.properties")
@ConfigurationProperties(prefix = "file")
public class FileResource {

    private String host;

    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }
}

file.host=http://192.168.253.170:8888/