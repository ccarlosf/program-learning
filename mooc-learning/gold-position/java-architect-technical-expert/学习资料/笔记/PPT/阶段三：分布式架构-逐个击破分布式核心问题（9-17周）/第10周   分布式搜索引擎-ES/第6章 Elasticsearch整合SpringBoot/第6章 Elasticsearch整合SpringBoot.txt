6-1 Elasticsearch整合SpringBoot - 配置文件（16分钟）
1.搭建elasticsearch6
(1).上传elasticsearch-6.4.3.tar.gz至服务器

(2).解压elasticsearch-6.4.3.tar.gz
tar -zxvf elasticsearch-6.4.3.tar.gz

(3).移动文件夹
mv elasticsearch-6.4.3 /usr/local

(4).进入elasticsearch-6.4.3文件夹
cd /usr/local/elasticsearch-6.4.3

(5).创建数据文件存储目录
mkdir data

(6).修改elasticsearch.yml
cd config/
vim elasticsearch.yml

# ---------------------------------- Cluster -----------------------------------
#
# Use a descriptive name for your cluster:
#
cluster.name: es6
#
# ------------------------------------ Node ------------------------------------
#
# Use a descriptive name for the node:
#
node.name: node0
#
# Add custom attributes to the node:
#
#node.attr.rack: r1
#
# ----------------------------------- Paths ------------------------------------
#
# Path to directory where to store the data (separate multiple locations by comma):
#
path.data: /usr/local/elasticsearch-6.4.3/data
#
# Path to log files:
#
path.logs: /usr/local/elasticsearch-6.4.3/logs
#
# ---------------------------------- Network -----------------------------------
#
# Set the bind address to a specific IP (IPv4 or IPv6):
#
network.host: 0.0.0.0
#
# Set a custom port for HTTP:
#
#http.port: 9200
#
# For more information, consult the network module documentation.
#

(7).配置参数
su root
修改limits.conf
vim /etc/security/limits.conf
* soft nofile 65536
* hard nofile 131072
* soft nproc 2048
* hard nproc 4096

修改sysctl.conf
vim /etc/sysctl.conf
vm.max_map_count=262145

刷新sysctl.conf
[root@pinyoyougou-docker bin]# sysctl -p
vm.max_map_count = 262145

(8).添加es用户
(1).添加用户
useradd esuser

(2).用户授权
回到elasticsearch目录 cd /usr/local/elasticsearch-6.4.3
chown -R esuser /usr/local/elasticsearch-6.4.3

(8).修改jvm.options
vim jvm.options

################################################################

# Xms represents the initial size of total heap space
# Xmx represents the maximum size of total heap space

-Xms128m
-Xmx128m

2.安装jdk
(1).新建jdk安装目录
mkdir /usr/java

(2).使用xftp上传jdk
mkdir /home/software

(3.解压jdk安装包
tar -zxvf jdk-8u191-linux-x64.tar.gz

(4).把解压后的jdk放到 /usr/java下
mv jdk1.8.0_191 /usr/java

(5).配置环境变量
修改profile文件
vim /etc/profile
export JAVA_HOME=/usr/java/jdk1.8.0_191
export CLASSPATH=.:%JAVA_HOME%/lib/dt.jar:%JAVA_HOME%/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin

(6).刷新profile，使其生效
source /etc/profile

3.整合中文分词器
(1).上传ik分词器服务器
/home/software

(2).解压分词器到指定/plugins/ik目录
unzip elasticsearch-analysis-ik-6.4.3.zip -d /usr/local/elasticsearch-6.4.3/plugins/ik

(3).进入分词器配置文件目录
cd /usr/local/elasticsearch-6.4.3/plugins/ik/config

(4).创建custom.dic
vim custom.dic
慕课网
骚年

(5).修改IKAnalyzer.cfg.xml
vim IKAnalyzer.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
        <comment>IK Analyzer 扩展配置</comment>
        <!--用户可以在这里配置自己的扩展字典 -->
        <entry key="ext_dict">custom.dic</entry>
         <!--用户可以在这里配置自己的扩展停止词字典-->
        <entry key="ext_stopwords"></entry>
        <!--用户可以在这里配置远程扩展字典 -->
        <!-- <entry key="remote_ext_dict">words_location</entry> -->
        <!--用户可以在这里配置远程扩展停止词字典-->
        <!-- <entry key="remote_ext_stopwords">words_location</entry> -->
</properties>



6-2 附：Elasticsearch整合SpringBoot - 配置文件



6-3 Elasticsearch整合SpringBoot- 索引的创建（11:42）
1.创建索引实体
@Document(indexName = "stu", type = "_doc")
public class Stu {

    @Id
    private Long stuId;

    @Field(store = true)
    private String name;

    @Field(store = true)
    private Integer age;

    public Long getStuId() {
        return stuId;
    }

    public void setStuId(Long stuId) {
        this.stuId = stuId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }
}

2.单元测试
@Test
public void createIndexStu() {

    Stu stu = new Stu();
    stu.setStuId(1002L);
    stu.setName("spider man");
    stu.setAge(22);

    IndexQuery indexQuery = new IndexQueryBuilder().withObject(stu).build();
    esTemplate.index(indexQuery);
}



6-4 Elasticsearch整合SpringBoot - 索引的删除与mappings更新（10:15）
1.创建索引实体
@Document(indexName = "stu", type = "_doc", shards = 3, replicas = 0)
public class Stu {

    @Id
    private Long stuId;

    @Field(store = true)
    private String name;

    @Field(store = true)
    private Integer age;

    @Field(store = true)
    private Float money;

    @Field(store = true, type = FieldType.Keyword)
    private String sign;

    @Field(store = true)
    private String description;

    public Long getStuId() {
        return stuId;
    }

    public void setStuId(Long stuId) {
        this.stuId = stuId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public Float getMoney() {
        return money;
    }

    public void setMoney(Float money) {
        this.money = money;
    }

    public String getSign() {
        return sign;
    }

    public void setSign(String sign) {
        this.sign = sign;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Override
    public String toString() {
        return "Stu{" +
                "stuId=" + stuId +
                ", name='" + name + '\'' +
                ", age=" + age +
                ", money=" + money +
                ", sign='" + sign + '\'' +
                ", description='" + description + '\'' +
                '}';
    }
}

2.单元测试
   /**
     * 不建议使用 ElasticsearchTemplate 对索引进行管理（创建索引，更新映射，删除索引）
     * 索引就像是数据库或者数据库中的表，我们平时是不会是通过java代码频繁的去创建修改删除数据库或者表的
     * 我们只会针对数据做CRUD的操作
     * 在es中也是同理，我们尽量使用 ElasticsearchTemplate 对文档数据做CRUD的操作
     * 1. 属性（FieldType）类型不灵活
     * 2. 主分片与副本分片数无法设置
     */

    @Test
    public void createIndexStu() {

        Stu stu = new Stu();
        stu.setStuId(1002L);
        stu.setName("spider man");
        stu.setAge(22);
        stu.setMoney(18.8f);
        stu.setSign("I am spider man");
        stu.setDescription("I wish i am a spider man");

        IndexQuery indexQuery = new IndexQueryBuilder().withObject(stu).build();
        esTemplate.index(indexQuery);
    }

    @Test
    public void deleteIndexStu() {
        esTemplate.deleteIndex(Stu.class);
    }



6-5 Elasticsearch整合SpringBoot - 文档数据的修改（07:38）
1.更新文档数据
//    ------------------------- 我是分割线 --------------------------------

    @Test
    public void updateStuDoc() {

        Map<String, Object> sourceMap = new HashMap<>();
        sourceMap.put("sign", "I am not super man");
        sourceMap.put("money", 88.6f);
        sourceMap.put("age", 33);

        IndexRequest indexRequest = new IndexRequest();
        indexRequest.source(sourceMap);

        UpdateQuery updateQuery = new UpdateQueryBuilder()
                .withClass(Stu.class)
                .withId("1002")
                .withIndexRequest(indexRequest)
                .build();

//        update stu set sign='abc',age=33,money=88.6 where docId='1002'

        esTemplate.update(updateQuery);
    }



6-6 Elasticsearch整合SpringBoot - 文档数据的查询与删除 （04:17）
1.查询文档
@Test
public void getStuDoc() {

    GetQuery query = new GetQuery();
    query.setId("1002");
    Stu stu = esTemplate.queryForObject(query, Stu.class);

    System.out.println(stu);
}

2.删除文档
@Test
public void deleteStuDoc() {
    esTemplate.delete(Stu.class, "1002");
}



6-7 ES整合SpringBoot- 实现分页搜索 （8分钟）
1.实现分页搜索
@Test
 public void searchStuDoc() {

     Pageable pageable = PageRequest.of(0, 2);

     SearchQuery query = new NativeSearchQueryBuilder()
             .withQuery(QueryBuilders.matchQuery("description", "save man"))
             .withPageable(pageable)
             .build();
     AggregatedPage<Stu> pagedStu = esTemplate.queryForPage(query, Stu.class);
     System.out.println("检索后的总分页数目为：" + pagedStu.getTotalPages());
     List<Stu> stuList = pagedStu.getContent();
     for (Stu s : stuList) {
         System.out.println(s);
     }

 }



6-8 ES整合SpringBoot - 实现高亮（18分钟）
1.高亮查询
 @Test
    public void highlightStuDoc() {

        String preTag = "<font color='red'>";
        String postTag = "</font>";

        Pageable pageable = PageRequest.of(0, 10);

        SortBuilder sortBuilder = new FieldSortBuilder("money")
                .order(SortOrder.DESC);
        SortBuilder sortBuilderAge = new FieldSortBuilder("age")
                .order(SortOrder.ASC);

        SearchQuery query = new NativeSearchQueryBuilder()
                .withQuery(QueryBuilders.matchQuery("description", "save man"))
                .withHighlightFields(new HighlightBuilder.Field("description")
                        .preTags(preTag)
                        .postTags(postTag))
                .withSort(sortBuilder)
                .withSort(sortBuilderAge)
                .withPageable(pageable)
                .build();
        AggregatedPage<Stu> pagedStu = esTemplate.queryForPage(query, Stu.class, new SearchResultMapper() {
            @Override
            public <T> AggregatedPage<T> mapResults(SearchResponse response, Class<T> clazz, Pageable pageable) {

                List<Stu> stuListHighlight = new ArrayList<>();

                SearchHits hits = response.getHits();
                for (SearchHit h : hits) {
                    HighlightField highlightField = h.getHighlightFields().get("description");
                    String description = highlightField.getFragments()[0].toString();

                    Object stuId = (Object)h.getSourceAsMap().get("stuId");
                    String name = (String)h.getSourceAsMap().get("name");
                    Integer age = (Integer)h.getSourceAsMap().get("age");
                    String sign = (String)h.getSourceAsMap().get("sign");
                    Object money = (Object)h.getSourceAsMap().get("money");

                    Stu stuHL = new Stu();
                    stuHL.setDescription(description);
                    stuHL.setStuId(Long.valueOf(stuId.toString()));
                    stuHL.setName(name);
                    stuHL.setAge(age);
                    stuHL.setSign(sign);
                    stuHL.setMoney(Float.valueOf(money.toString()));

                    stuListHighlight.add(stuHL);
                }

                if (stuListHighlight.size() > 0) {
                    return new AggregatedPageImpl<>((List<T>)stuListHighlight);
                }

                return null;
            }
        });
        System.out.println("检索后的总分页数目为：" + pagedStu.getTotalPages());
        List<Stu> stuList = pagedStu.getContent();
        for (Stu s : stuList) {
            System.out.println(s);
        }

    }