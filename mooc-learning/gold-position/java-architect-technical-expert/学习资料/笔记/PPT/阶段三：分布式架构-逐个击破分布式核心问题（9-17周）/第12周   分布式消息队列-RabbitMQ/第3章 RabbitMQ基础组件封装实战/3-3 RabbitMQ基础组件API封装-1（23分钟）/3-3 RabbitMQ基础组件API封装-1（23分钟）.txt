3-3 RabbitMQ基础组件API封装-1（23分钟）
1.Message类
@Data
  public class Message implements Serializable {

      private static final long serialVersionUID = 841277940410721237L;

      /* 	消息的唯一ID	*/
      private String messageId;

      /*	消息的主题		*/
      private String topic;

      /*	消息的路由规则	*/
      private String routingKey = "";

      /*	消息的附加属性	*/
      private Map<String, Object> attributes = new HashMap<String, Object>();

      /*	延迟消息的参数配置	*/
      private int delayMills;

      /*	消息类型：默认为confirm消息类型	*/
      private String messageType = MessageType.CONFIRM;

      public Message() {
      }

      public Message(String messageId, String topic, String routingKey, Map<String, Object> attributes, int delayMills) {
          this.messageId = messageId;
          this.topic = topic;
          this.routingKey = routingKey;
          this.attributes = attributes;
          this.delayMills = delayMills;
      }

      public Message(String messageId, String topic, String routingKey, Map<String, Object> attributes, int delayMills,
                     String messageType) {
          this.messageId = messageId;
          this.topic = topic;
          this.routingKey = routingKey;
          this.attributes = attributes;
          this.delayMills = delayMills;
          this.messageType = messageType;
      }

  }

2.MessageBuilder类
/**
 * 	$MessageBuilder 建造者模式
 *
 */
public class MessageBuilder {

	private String messageId;
	private String topic;
	private String routingKey = "";
	private Map<String, Object> attributes = new HashMap<String, Object>();
	private int delayMills;
	private String messageType = MessageType.CONFIRM;

	private MessageBuilder() {
	}

	public static MessageBuilder create() {
		return new MessageBuilder();
	}

	public MessageBuilder withMessageId(String messageId) {
		this.messageId = messageId;
		return this;
	}

	public MessageBuilder withTopic(String topic) {
		this.topic = topic;
		return this;
	}

	public MessageBuilder withRoutingKey(String routingKey) {
		this.routingKey = routingKey;
		return this;
	}

	public MessageBuilder withAttributes(Map<String, Object> attributes) {
		this.attributes = attributes;
		return this;
	}

	public MessageBuilder withAttribute(String key, Object value) {
		this.attributes.put(key, value);
		return this;
	}

	public MessageBuilder withDelayMills(int delayMills) {
		this.delayMills = delayMills;
		return this;
	}

	public MessageBuilder withMessageType(String messageType) {
		this.messageType = messageType;
		return this;
	}

	public Message build() {

		// 1. check messageId
		if(messageId == null) {
			messageId = UUID.randomUUID().toString();
		}
		// 2. topic is null
		if(topic == null) {
			throw new MessageRunTimeException("this topic is null");
		}
		Message message = new Message(messageId, topic, routingKey, attributes, delayMills, messageType);
		return message;
	}

}

3.MessageException类
/**
 * 	$MessageException
 *
 */
public class MessageException extends Exception {

	private static final long serialVersionUID = 6347951066190728758L;

	public MessageException() {
		super();
	}

	public MessageException(String message) {
		super(message);
	}

	public MessageException(String message, Throwable cause) {
		super(message, cause);
	}

	public MessageException(Throwable cause) {
		super(cause);
	}

}

4.MessageRunTimeException类
/**
 * 	$MessageRunTimeException
 *
 */
public class MessageRunTimeException extends RuntimeException {

	private static final long serialVersionUID = 8651828913888663267L;

	public MessageRunTimeException() {
		super();
	}

	public MessageRunTimeException(String message) {
		super(message);
	}

	public MessageRunTimeException(String message, Throwable cause) {
		super(message, cause);
	}

	public MessageRunTimeException(Throwable cause) {
		super(cause);
	}
}

5.MessageType类
public final class MessageType {

    /**
     * 迅速消息：不需要保障消息的可靠性, 也不需要做confirm确认
     */
    public static final String RAPID = "0";

    /**
     * 确认消息：不需要保障消息的可靠性，但是会做消息的confirm确认
     */
    public static final String CONFIRM = "1";

    /**
     * 可靠性消息： 一定要保障消息的100%可靠性投递，不允许有任何消息的丢失
     * PS: 保障数据库和所发的消息是原子性的（最终一致的）
     */
    public static final String RELIANT = "2";

}
